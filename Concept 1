#import tkinter so we can make a GUI
import tkinter as tk
from tkinter import messagebox
from tkinter import *
import os

#quit subroutine
def quit():
    main_window.destroy()

#print all the headings for when data is entered
def print_store_details():
    name_count = 0
    #Create the column headings
    Label(main_window, font=("Helvetica 10 bold"),text="Row").grid(column=0,row=7)
    Label(main_window, font=("Helvetica 10 bold"),text="Full Name").grid(column=1,row=7)
    Label(main_window, font=("Helvetica 10 bold"),text="Receipt Number").grid(column=2,row=7)
    Label(main_window, font=("Helvetica 10 bold"),text="The Item that is hired").grid(column=3,row=7)
    Label(main_window, font=("Helvetica 10 bold"),text="How many of the item").grid(column=4,row=7)

    #add each item in the list into its own row
    while name_count < counters['total_entries'] :
        Label(main_window, text=name_count).grid(column=0,row=name_count+8) 
        Label(main_window, text=(store_details[name_count][0])).grid(column=1,row=name_count+8)
        Label(main_window, text=(store_details[name_count][1])).grid(column=2,row=name_count+8)
        Label(main_window, text=(store_details[name_count][2])).grid(column=3,row=name_count+8)
        Label(main_window, text=(store_details[name_count][3])).grid(column=4,row=name_count+8)
        name_count +=1
        counters['name_count'] = name_count

#add the next customer to the list
def append_name():
    #check_inputs()
    if len(entry_name.get()) == 0 :
        #append each item to its own area of the list
        check_inputs()
    else:
        store_details.append([entry_name.get(),entry_receipt.get(),entry_hired_item.get(),entry_item_amount.get()])
        #clear the boxes
        entry_name.delete(0,'end')
        entry_receipt.delete(0,'end')
        entry_hired_item.delete(0,'end')
        entry_item_amount.delete(0,'end')
        counters['total_entries'] += 1

#delete a row from the list
def delete_row():
    #find which row is to be deleted and delete it
    del store_details[int(delete_item.get())]
    counters['total_entries'] -= 1
    name_count = counters['name_count']
    delete_item.delete('end')

    #clear the last item displayed on the GUI
    Label(main_window, text="       ").grid(column=0,row=name_count+7) 
    Label(main_window, text="       ").grid(column=1,row=name_count+7)
    Label(main_window, text="       ").grid(column=2,row=name_count+7)
    Label(main_window, text="       ").grid(column=3,row=name_count+7)
    Label(main_window, text="       ").grid(column=4,row=name_count+7)

    #print all the items in the list
    print_store_details()

def validate_alpha_input(char):
    return char.isalpha()

def validate_digit_input(char):
    return char.isdigit()

#Check the inputs are all valid
def check_inputs():
    text = entry_name.get()
    if entry_name.get() == "":
        messagebox.showwarning("Warning", "'Full Name' is empty")
        entry_name.delete(0, tk.END)
        
    elif entry_name.get().isalpha():
        # Display the entry below the button
        display_label = Label(main_window, text=text)
        #display_label.pack()

        # Save the entry to a file ("entries.txt" is the name of the file that the entries will be saved to)
        with open("entries.txt", "a") as file:
            file.write(text)

        # Clear the entry box
        entry_name.delete(0, tk.END)

    elif entry_name.get().isdigit():
        messagebox.showwarning("Warning", "'Full Name' cannot be a number!")
        entry_name.delete(0, tk.END)
        
    #Ensuring that the 'save_entry' function only processes valid entries
    #a seperate window will pop up saying that the entry box is empty or invalid
    else:
        messagebox.showwarning("Warning", "'Full Name' can't be a special character!")
        # Clear the entry box
        entry_name.delete(0, tk.END)

    text=entry_hired_item.get()
    if entry_hired_item.get() == "":
        messagebox.showwarning("Warning", "'The Item that is hired' is empty")
        entry_hired_item.delete(0, tk.END)
        
    elif entry_hired_item.get().isalpha():
        display_label = Label(main_window, text=text)
        with open("entries.txt", "a") as file:
            file.write(text)
        entry_hired_item.delete(0, tk.END)
        
    elif entry_hired_item.get().isdigit():
        messagebox.showwarning("Warning", "'The Item that is hired' cannot be a number")
        entry_hired_item.delete(0, tk.END)
        
    else:
        messagebox.showwarning("Warning", "'The Item that is hired' can't be a special character!")
        # Clear the entry box
        entry_hired_item.delete(0, tk.END)

#create the buttons and labels
def setup_buttons():
    bg_colour1 = "hot pink"
    #create all the empty and default labels, buttons and entry boxes. Put them in the correct grid location
    Label(main_window, text="Full Name") .grid(column=0,row=0,sticky=E)
    Label(main_window, text="Receipt Number") .grid(column=0,row=1,sticky=E)
    Label(main_window, text="The Item that is hired") .grid(column=0,row=2,sticky=E)
    Label(main_window, text="How many of the item") .grid(column=0,row=3,sticky=E)
    Label(main_window, text="Row #") .grid(column=3,row=2,sticky=E)
    Label(main_window, text="               ") .grid(column=2,row=0)

    Button(main_window, text="Quit",command=quit,width = 10, bg=bg_colour1) .grid(column=4, row=0,sticky=E)
    Button(main_window, text="Print Details",command=print_store_details, width = 10, bg=bg_colour1) .grid(column=4,row=1,sticky=E)
    Button(main_window, text="Delete Row",command=delete_row, width = 10, bg=bg_colour1) .grid(column=4,row=3,sticky=E)
    
    #image things
    img = PhotoImage(file='triangle2.5.png')
    append_details_button = Button(main_window, image=img,command=append_name,text="Append Details", bg=bg_colour1).grid(column=3,row=1)
    append_details_button.pack(pady=20)

#start the program running
def main():
    #Start the GUI up
    setup_buttons()
    main_window.mainloop()
    
#create empty list for store details and empty variable for entries in the list
counters = {'total_entries':0,'name_count':0}
store_details = []    
main_window = Tk()    

#Setting up the validation command
#Configuring the entry widget to use the validation function
validate_alpha = main_window.register(validate_alpha_input)
validate_digit = main_window.register(validate_digit_input)

entry_name = Entry(main_window)
entry_name.grid(column=1,row=0)

entry_receipt = Entry(main_window)
entry_receipt.grid(column=1,row=1)

entry_hired_item = Entry(main_window)
entry_hired_item.grid(column=1,row=2)

entry_item_amount = Entry(main_window)
entry_item_amount.grid(column=1, row=3)

delete_item = Entry(main_window)
delete_item.grid(column=3,row=3)    

main()


