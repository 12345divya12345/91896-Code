# Import tkinter so we can make a GUI
import tkinter as tk
from tkinter import messagebox # Importing messagebox for error messages
from tkinter import *
from tkinter import ttk # Importing ttk for combobox function
import random # Importing random for generating a random receipt number
import os # For saving to a data file

# Start the program running
def main():
    # Declaring the global variables
    global main_window, entry_name, entry_hired_item, entry_item_amount, delete_item, store_details, counters
    # Choosing a background colour
    bg_colour1 = "lightblue"
    bg_colour2 = "khaki"
    # Choosing a font
    font1=("Verdana", 8, "normal")
    font_headings=("Verdana", 8, "bold")
    
    # Creating the main window
    main_window = tk.Tk()
    # Changing background colour
    main_window.configure(bg=bg_colour1)
    # Personalising the window name
    main_window.title("Julie's Party Hire Store")
    # Personalising the icon of the main window
    main_window.iconbitmap('pinkhat.ico')

    # Create empty list for store details and empty variable for entries in the list
    counters = {'total_entries':0,'name_count':0}
    store_details = []  # Creating frames for organisation

    top_frame = tk.Frame(main_window, bg=bg_colour1)
    top_frame.grid(row=0, column=0, sticky="ew")

    middle_frame = tk.Frame(main_window, bg=bg_colour1)
    middle_frame.grid(row=1, column=0, sticky="ew")

    bottom_frame = tk.Frame(main_window, bg=bg_colour1)
    bottom_frame.grid(row=2, column=0, sticky="ew")

    bottom_most_frame = tk.Frame(main_window, bg=bg_colour1)
    bottom_most_frame.grid(row=3, column=0, sticky="ew")

    # Creating a function that can be used to exit to program
    def exit_program():
        main_window.destroy()

    def save_entry_to_file(entry):   
        with open("entries.txt","a") as file: # 'a' opens the file for appending
            file.write(",".join(map(str,entry))+"\n")

    # Add the next customer to the list
    def append_name():
        check_inputs()
        if len(entry_name.get()) == 0 :
            # Append each item to its own area of the list
            check_inputs()
        else:
            # Generating a random receipt number
            receipt_number=random.randint(100,999)
            # Creating the entry as a list of values
            entry=([entry_name.get(),entry_hired_item.get(),entry_item_amount.get(),receipt_number])
            # Append the entry to the storedetails 
            store_details.append(entry)
            # Save the entry to the file
            save_entry_to_file(entry)
            # Clear the boxes
            entry_name.delete(0,'end')
            entry_hired_item.delete(0,'end')
            entry_item_amount.delete(0,'end')
            counters['total_entries'] += 1

    def validate_alpha_input(char):
        return char.isalpha()

    def validate_digit_input(char):
        return char.isdigit()
    # Print all the headings for when data is entered
    def print_store_details():
        name_count = 0
        # Create the column headings
        Label(bottom_most_frame, font=font_headings, text="Row", bg=bg_colour1).grid(column=0,row=8,padx=2,pady=2)
        Label(bottom_most_frame, font=font_headings, text="Name", bg=bg_colour1).grid(column=1,row=8,padx=2,pady=2)
        Label(bottom_most_frame, font=font_headings, text="The Item that is hired", bg=bg_colour1).grid(column=2,row=8,padx=2,pady=2)
        Label(bottom_most_frame, font=font_headings, text="How many of the item", bg=bg_colour1).grid(column=3,row=8,padx=2,pady=2)
        Label(bottom_most_frame, font=font_headings, text="Receipt No.", bg=bg_colour1).grid(column=4, row=8,padx=2,pady=2)

        # Add each item in the list into its own row
        while name_count < counters['total_entries'] :
            Label(bottom_most_frame, font=font1, text=name_count, bg=bg_colour1).grid(column=0,row=name_count+9) 
            Label(bottom_most_frame, font=font1, text=(store_details[name_count][0]), bg=bg_colour1).grid(column=1,row=name_count+9,padx=2,pady=2)
            Label(bottom_most_frame, font=font1, text=(store_details[name_count][1]), bg=bg_colour1).grid(column=2,row=name_count+9,padx=2,pady=2)
            Label(bottom_most_frame, font=font1, text=(store_details[name_count][2]), bg=bg_colour1).grid(column=3,row=name_count+9,padx=2,pady=2)
            Label(bottom_most_frame, font=font1, text=(store_details[name_count][3]), bg=bg_colour1).grid(column=4,row=name_count+9,padx=2,pady=2)
            name_count +=1
            counters['name_count'] = name_count

    # Delete a row from the list
    def delete_row():
        try:
            row_to_delete=int(entry_delete_item.get())
            if row_to_delete<0 or row_to_delete>= len(store_details):
                messagebox.showwarning("Warning", "Invalid Row Number!")
                entry_delete_item.delete(0,'end')
                return
            del store_details[row_to_delete]
            counters['total_entries'] -=1
            for widget in bottom_most_frame.grid_slaves():
                if widget.grid_info()["row"]>7:
                     widget.grid_forget()
            print_store_details()
            entry_delete_item.delete(0,'end')
        except ValueError:
            messagebox.showwarning("Warning", "Invalid Row Number! (No alphabetical letters or special characters)")
            entry_delete_item.delete(0,'end')

    def delete_row_popup():
        # Creating a new toplevel window/popup
        popup=tk.Toplevel(main_window)
        popup.title("Deleting a Row")
        popup.geometry("275x125")
        main_window.iconbitmap('pinkhat.ico')
        popup.configure(bg=bg_colour1)

        tk.Label(popup, text="Which row would you like to delete?", bg=bg_colour1).pack(pady=10)
        global entry_delete_item
        entry_delete_item=tk.Entry(popup)
        entry_delete_item.pack(pady=5)

        def confirm_deletion():
            delete_row() # Call the deletion function above
            popup.destroy() # Close the popup

        tk.Button(popup, text="Delete", command=confirm_deletion,bg=bg_colour2).pack(side="left", padx=10, pady=10)
        tk.Button(popup, text="Cancel", command=popup.destroy, bg=bg_colour2).pack(side="right", padx=10, pady=10)

    def check_entry_name():
        name = entry_name.get()
        if name == "":
            messagebox.showwarning("Warning", "'Name' is empty")
        elif name.isalpha():
            name_length = len(name)
            if name_length > 12:
                messagebox.showwarning("Warning", "'Name' cannot be larger than 12 characters!")
            else:
                display_label = Label(bottom_most_frame, text=name)
        elif name.isdigit():
            print("Name is a number")
            messagebox.showwarning("Warning", "'Name' cannot be a number!")
        else:
            print("Name has special characters")
            messagebox.showwarning("Warning", "'Name' can't be a special character!")

    def check_entry_hired_item():
        text=entry_hired_item.get()
        if entry_hired_item.get() == "":
            messagebox.showwarning("Warning", "'The Item that is hired' is empty")  
        elif entry_hired_item.get().isalpha():
            display_label = Label(main_window, text=text)            
        elif entry_hired_item.get().isdigit():
            messagebox.showwarning("Warning", "'The Item that is hired' cannot be a number")
        else:
            messagebox.showwarning("Warning", "'The Item that is hired' can't be a special character!")

    def check_item_amount():
        text=entry_item_amount.get()
        if entry_item_amount.get() == "":
            messagebox.showwarning("Warning", "'How many of the item' is empty")
        elif entry_item_amount.get().isdigit():
            display_label = Label(main_window, text=text)
        elif entry_item_amount.get().isalpha():
            messagebox.showwarning("Warning", "'How many of the item' cannot be an alphabetical number")
        else:
            messagebox.showwarning("Warning", "'How many of the item' can't be a special character!")

    # Check the inputs are all valid
    def check_inputs():
        check_entry_name()
        check_entry_hired_item()
        check_item_amount()

    # Loading the png image
    image=tk.PhotoImage(file="Julie's party hire logo.png")
    # Creating a label and setting the image as the content
    image_label = tk.Label(top_frame, image=image, bg=bg_colour1)
    image_label.grid(column=1, row=0, padx=80, pady=10, sticky="nsew")
    image_label.image=image # Keeping a reference to avoid garbage collection (without this, image won't display)

    # Setting up the validation command
    # Configuring the entry widget to use the validation function
    validate_alpha = main_window.register(validate_alpha_input)
    validate_digit = main_window.register(validate_digit_input)
    
    # Adding labels and entries to middle frame
    tk.Label(middle_frame, font=font1, text="Name", bg=bg_colour1).grid(row=0, column=0, sticky="e", padx=5, pady=5)
    tk.Label(middle_frame, font=font1, text="The Item that is hired", bg=bg_colour1).grid(row=1, column=0, sticky="e", padx=5, pady=5)
    tk.Label(middle_frame, font=font1, text="How many of the item", bg=bg_colour1).grid(row=2, column=0, sticky="e", padx=5, pady=5)

    entry_name = tk.Entry(middle_frame, validate="key", validatecommand=(validate_alpha,'%S'))
    entry_name.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
    # Deciding on items for the combobox
    items_hired=['Chairs','Tables','Tablecloth','Table Centerpieces','String Lights','Balloons','Flowers','Speakers','Paper Plates','Paper Bowls','Glassware','Beverage Dispensers']
    entry_hired_item = ttk.Combobox(middle_frame, values=items_hired, validate="key", validatecommand=(validate_alpha,'%S'))
    entry_hired_item.grid(row=1, column=1, padx=5, pady=5, sticky="ew")
    entry_item_amount = tk.Entry(middle_frame,validate="key", validatecommand=(validate_digit,'%S'))
    entry_item_amount.grid(row=2, column=1, padx=5, pady=5, sticky="ew")

    # Adding buttons to bottom frame
    tk.Button(bottom_frame, font=font1, command=append_name,text="Check and Save Details", bg=bg_colour2).grid(row=3, column=1, padx=4, pady=4)
    tk.Button(bottom_frame, font=font1, text="Display Details",command=print_store_details, bg=bg_colour2).grid(row=3, column=2, padx=4, pady=4)
    tk.Button(bottom_frame, font=font1, text="Delete Row",command=delete_row_popup, bg=bg_colour2).grid(row=3, column=3, padx=4, pady=4)
    tk.Button(bottom_frame, font=font1, text="Quit",command=exit_program, bg=bg_colour2).grid(row=3, column=4, padx=4, pady=4)
    
    # Configure grid weight to allow resizing
    top_frame.grid_columnconfigure(0, weight=1)
    middle_frame.grid_columnconfigure(1, weight=1)
    bottom_frame.grid_columnconfigure([0, 1, 2, 3], weight=1)
    bottom_most_frame.grid_columnconfigure([0,1,2,3], weight=1)
    
    # Start the GUI up
    main_window.mainloop()

if __name__ == "__main__":
    main()

