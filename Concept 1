#import tkinter so we can make a GUI
import tkinter as tk
from tkinter import messagebox #importing messagebox for error messages
from tkinter import *
from tkinter import ttk #importing ttk for combobox function
import random #importing random for generating a random receipt number
import os #for saving to a data file

#creating a function that can be used to exit to program
def exit_program():
    main_window.destroy()

#print all the headings for when data is entered
def print_store_details():
    name_count = 0
    #Create the column headings
    Label(main_window, font=font1, text="Row").grid(column=0,row=7)
    Label(main_window, font=font1, text="Full Name").grid(column=1,row=7)
    Label(main_window, font=font1, text="The Item that is hired").grid(column=2,row=7)
    Label(main_window, font=font1, text="How many of the item").grid(column=3,row=7)
    Label(main_window, font=font1, text="Receipt No.").grid(column=4, row=7)

    #add each item in the list into its own row
    while name_count < counters['total_entries'] :
        Label(main_window, font=font1, text=name_count).grid(column=0,row=name_count+8) 
        Label(main_window, font=font1, text=(store_details[name_count][0])).grid(column=1,row=name_count+8)
        Label(main_window, font=font1, text=(store_details[name_count][1])).grid(column=2,row=name_count+8)
        Label(main_window, font=font1, text=(store_details[name_count][2])).grid(column=3,row=name_count+8)
        Label(main_window, font=font1, text=(store_details[name_count][3])).grid(column=4,row=name_count+8)
        name_count +=1
        counters['name_count'] = name_count

def save_entry_to_file(entry):
    with open("entries.txt","a") as file: #'a' opens the file for appending
        file.write(",".join(map(str,entry))+"\n")

#add the next customer to the list
def append_name():
    #check_inputs()
    if len(entry_name.get()) == 0 :
        #append each item to its own area of the list
        check_inputs()
    else:
        #Generating a random receipt number
        receipt_number=random.randint(100,999)
        #creating the entry as a list of values
        entry=([entry_name.get(),entry_hired_item.get(),entry_item_amount.get(),receipt_number])
        #append the entry to the storedetails 
        store_details.append(entry)
        #save the entry to the file
        save_entry_to_file(entry)
        #clear the boxes
        entry_name.delete(0,'end')
        entry_hired_item.delete(0,'end')
        entry_item_amount.delete(0,'end')
        counters['total_entries'] += 1

#delete a row from the list
def delete_row():
    try:
        row_to_delete=int(delete_item.get())

        if row_to_delete<0 or row_to_delete>= len(store_details):
            messagebox.showwarning("Warning", "Invalid Row Number!")
            delete_item.delete(0,'end')
            return
        del store_details[row_to_delete]

        counters['total_entries'] -=1
                 

        for widget in main_window.grid_slaves():
            if widget.grid_info()["row"]>7:
                 widget.grid_forget()

        print_store_details()
        delete_item.delete(0,'end')

    except ValueError:
        messagebox.showwarning("Warning", "Invalid Row Number! (No alphabetical letters or special characters)")
    

def validate_alpha_input(char):
    return char.isalpha()

def validate_digit_input(char):
    return char.isdigit()

def check_entry_name():
    text = entry_name.get()
    if entry_name.get() == "":
        messagebox.showwarning("Warning", "'Full Name' is empty")
        entry_name.delete(0, tk.END)
        
    elif entry_name.get().isalpha():
        # Display the entry below the button
        display_label = Label(main_window, text=text)
        # Clear the entry box
        entry_name.delete(0, tk.END)

    elif entry_name.get().isdigit():
        messagebox.showwarning("Warning", "'Full Name' cannot be a number!")
        entry_name.delete(0, tk.END)
        
    #Ensuring that the 'save_entry' function only processes valid entries
    #a seperate window will pop up saying that the entry box is empty or invalid
    else:
        messagebox.showwarning("Warning", "'Full Name' can't be a special character!")
        # Clear the entry box
        entry_name.delete(0, tk.END)

def check_entry_hired_item():
    text=entry_hired_item.get()
    if entry_hired_item.get() == "":
        messagebox.showwarning("Warning", "'The Item that is hired' is empty")
        entry_hired_item.delete(0, tk.END)
        
    elif entry_hired_item.get().isalpha():
        display_label = Label(main_window, text=text)
        entry_hired_item.delete(0, tk.END)
        
    elif entry_hired_item.get().isdigit():
        messagebox.showwarning("Warning", "'The Item that is hired' cannot be a number")
        entry_hired_item.delete(0, tk.END)
        
    else:
        messagebox.showwarning("Warning", "'The Item that is hired' can't be a special character!")
        # Clear the entry box
        entry_hired_item.delete(0, tk.END)

def check_item_amount():
    text=entry_item_amount.get()
    if entry_item_amount.get() == "":
        messagebox.showwarning("Warning", "'How many of the item' is empty")
        entry_item_amount.delete(0, tk.END)
        
    elif entry_item_amount.get().isdigit():
        display_label = Label(main_window, text=text)
        entry_item_amount.delete(0, tk.END)
        
    elif entry_item_amount.get().isalpha():
        messagebox.showwarning("Warning", "'How many of the item' cannot be an alphabetical number")
        entry_item_amount.delete(0, tk.END)
        
    else:
        messagebox.showwarning("Warning", "'How many of the item' can't be a special character!")
        # Clear the entry box
        entry_item_amount.delete(0, tk.END)

#Check the inputs are all valid
def check_inputs():
    check_entry_name()
    check_entry_hired_item()
    check_item_amount()

#create the buttons and labels
def setup_buttons():
    #create all the empty and default labels, buttons and entry boxes. Put them in the correct grid location
    Label(main_window, font=font1, text="Full Name") .grid(column=0,row=0,sticky=E)
    Label(main_window, font=font1, text="The Item that is hired") .grid(column=0,row=1,sticky=E)
    Label(main_window, font=font1, text="How many of the item") .grid(column=0,row=2,sticky=E)
    Label(main_window, font=font1, text="Row #") .grid(column=3,row=2,sticky=E)
    Label(main_window, font=font1, text="               ") .grid(column=2,row=0)
    Button(main_window, font=font1, text="Quit",command=exit_program,width = 10) .grid(column=4, row=0,sticky=E)
    Button(main_window, font=font1, text="Display Details",command=print_store_details, width = 10) .grid(column=4,row=1,sticky=E)
    Button(main_window, font=font1, text="Delete Row",command=delete_row, width = 10) .grid(column=4,row=3,sticky=E)
    Button(main_window, font=font1, command=append_name,text="Check and Save Details").grid(column=3,row=1)

#start the program running
def main():
    #personalising the icon of the main window
    main_window.iconbitmap('pinkhat.ico')
    #Start the GUI up
    setup_buttons()
    main_window.mainloop()
    
#create empty list for store details and empty variable for entries in the list
counters = {'total_entries':0,'name_count':0}
store_details = []    
main_window = Tk()
#personalising the window name
main_window.title("Julie's Party Hire Store")

font1=("Helvetica 10 normal")

#setting up the validation command
#configuring the entry widget to use the validation function
validate_alpha = main_window.register(validate_alpha_input)
validate_digit = main_window.register(validate_digit_input)

entry_name = Entry(main_window,validate="key", validatecommand=(validate_alpha,'%S'))
entry_name.grid(column=1,row=0)

#deciding on items for the combobox
items_hired=['Chairs','Tables','Tablecloth','Table Centerpieces','String Lights','Balloons','Flowers','Speakers','Paper Plates','Paper Bowls','Glassware','Beverage Dispensers']

entry_hired_item = ttk.Combobox(main_window, values=items_hired)
entry_hired_item.grid(column=1,row=1)

entry_item_amount = Entry(main_window,validate="key", validatecommand=(validate_digit,'%S'))
entry_item_amount.grid(column=1, row=2)

delete_item = Entry(main_window)
delete_item.grid(column=3,row=3)    

main()

